#+TITLE: cpp2 layer

* Description
This layer adds support for the C++ language.

** Features:
- Syntax highlighting and indentation using cc-mode
- Auto completion using [[https://github.com/abingham/emacs-ycmd][ycmd]]
- Syntax checking using [[https://github.com/abingham/emacs-ycmd][ycmd]]
- Code navigation using [[https://github.com/Andersbakken/rtags][rtags]]
- Formatting using [[https://github.com/chapuni/clang/blob/master/tools/clang-format/clang-format.el][clang-format]]
- Debugging using [[https://www.emacswiki.org/emacs/GDB-MI][gdb-mi]]
- Extra syntax highlighting from [[https://github.com/ludwigpacifici/modern-cpp-font-lock][modern-cpp-font-lock]]
- Cmake support via [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][cmake-mode]]

* Install
** Layer
To use this configuration layer, add it to your =~/.spacemacs=. You will need to
add =cpp2= to the existing =dotspacemacs-configuration-layers= list in this
file.

** Dependencies
Most of cpp2's dependencies are emacs packages which get installed
automatically. However, there are two major dependencies that follow a server
client architecture, and require external installation.

*** Auto-completion and syntax-checking: ycmd
In order to get auto-completion and syntax-checking, you must enable the
appropriate spacemacs layers.

Althoug the =emacs-ycmd= package will be installed automatically, the actual
ycmd server itself must be installed. Go to https://github.com/Valloric/ycmd,
and follow the instructions. It basically consists of cloning the repo,
installing several dependencies, and then running a script to build it.

Once it's built, add a line similar to this in your the =user-config= of your
=~/.spacemacs=, reflecting the location where ycmd was installed. Note the
doubled "ycmd" at the end of the path.

#+begin_src elisp
  (setq ycmd-server-command '("python" "/home/nir/Documents/software/ycmd/ycmd"))
#+end_src

Once this is done (and after the config has been reloaded), you should be able
to open an empty .cpp file, and start typing and see error checking and get
auto completion (see Key Bindings section).

*** Code navigation: rtags
While ycmd's parsing of C++ is quite robust, it only parses files on demand
as you open them, and it does not maintain any kind of project-wide database.
This means that, for example, ycmd cannot reliably go to definition (because
in C++, the definition could be in a different file, the declaration will
always be #included into the current file though). It also can't find
references, look at include graphs, object hierarchies, and basically anything
that requires understanding the whole project.

Fortunately, this is exactly the niche that rtags fills.


#+begin_src sh
    pip install flake8
#+end_src

* Key Bindings
** Code navigation
Start a Python or iPython inferior REPL process with ~SPC m s i~.
If =ipython= is available in system executable search paths, =ipython=
will be used to launch python shell; otherwise, default =python=
interpreter will be used.  You may change your system executable
search path by activating a virtual environment.

Send code to inferior process commands:

| Key Binding | Description                                     |
|-------------+-------------------------------------------------|
| ~SPC m s b~ | send buffer and keep code buffer focused        |
| ~SPC m s B~ | send buffer and switch to REPL in insert mode   |
| ~SPC m s f~ | send function and keep code buffer focused      |
| ~SPC m s F~ | send function and switch to REPL in insert mode |
| ~SPC m s i~ | start inferior REPL process                     |
| ~SPC m s r~ | send region and keep code buffer focused        |
| ~SPC m s R~ | send region and switch to REPL in insert mode   |
| ~CTRL+j~    | next item in REPL history                       |
| ~CTRL+k~    | previous item in REPL history                   |

** Running Python Script in shell
To run a Python script like you would in the shell press ~SPC m c c~
to start the Python script in comint mode. This is useful when working with
multiple Python files since the REPL does not reload changes made in other
modules.

| Key Binding | Description                                                               |
|-------------+---------------------------------------------------------------------------|
| ~SPC m c c~ | Execute current file in a comint shell                                    |
| ~SPC m c C~ | Execute current file in a comint shell and switch to it in =insert state= |

*Note:* With the universal argument ~SPC u~ you can enter a new
compilation command.

** Testing
Test commands start with ~m t~. To use the secondary test runner call the
function with a prefix argument, for example ~SPC u SPC m t a~.

| No Debug    | Description                                              |
|-------------+----------------------------------------------------------|
| ~SPC m t a~ | launch all tests of the project                          |
| ~SPC m t b~ | launch all tests of the current buffer (same as module)  |
| ~SPC m t m~ | launch all tests of the current module                   |
| ~SPC m t s~ | launch all tests of the current suite (only with =nose=) |
| ~SPC m t t~ | launch the current test (function)                       |

| Debug       | Description                                                            |
|-------------+------------------------------------------------------------------------|
| ~SPC m t A~ | launch all tests of the project in debug mode                          |
| ~SPC m t B~ | launch all tests of the current buffer (module) in debug mode          |
| ~SPC m t M~ | launch all tests of the current module in debug mode                   |
| ~SPC m t S~ | launch all tests of the current suite in debug mode (only with =nose=) |
| ~SPC m t T~ | launch the current test (function) in debug mode                       |

** Refactoring

| Key Binding | Description                          |
|-------------+--------------------------------------|
| ~SPC m r i~ | remove unused imports with [[https://github.com/myint/autoflake][autoflake]] |
| ~SPC m r I~ | sort imports with [[https://pypi.python.org/pypi/isort][isort]]              |

** Live coding
Live coding is provided by the [[https://github.com/donkirkby/live-py-plugin][live-py-plugin.]]

| Key Binding | Description         |
|-------------+---------------------|
| ~SPC m l~   | Toggle live-py-mode |

** Hy REPL process
Start a Hy inferior repel process with ~SPC m s i~. If =hy= is
available in system executable search paths, =hy= will be used to
launch the shell. You may change your system executable search path
by activating a virtual enviornment.

Send code to hy REPL commands:

| Key Binding | Description                                               |
|-------------+-----------------------------------------------------------|
| ~SPC m s b~ | send buffer and keep code buffer focused                  |
| ~SPC m s B~ | switch to REPL                                            |
| ~SPC m s e~ | send sexp in front of the cursor to the REPL              |
| ~SPC m s f~ | send function to REPL and stay in buffer                  |
| ~SPC m s F~ | send function to REPL and switch to repl buffer           |
| ~SPC m s i~ | start inferior hy repl                                    |
| ~SPC m s r~ | send current region to the REPL and stay in buffer        |
| ~SPC m s R~ | send current region to the REPL and switch to repl buffer |

** Other Python commands

| Key Binding | Description                                                                  |
|-------------+------------------------------------------------------------------------------|
| ~SPC m =~   | Reformat the buffer according to PEP8 using  [[https://github.com/google/yapf][YAPF]]                            |
| ~SPC m d b~ | toggle a breakpoint using =wdb=, =ipdb=, =pudb= or =pdb=                     |
| ~SPC m g g~ | go to definition using =anaconda-mode-find-definitions= (~C-o~ to jump back) |
| ~SPC m g a~ | go to assignment using =anaconda-mode-find-assignments= (~C-o~ to jump back) |
| ~SPC m g b~ | jump back                                                                    |
| ~SPC m g u~ | navigate between usages with =anaconda-mode-find-references=                 |
| ~SPC m h d~ | look for documentation using =helm-pydoc=                                    |
| ~SPC m h h~ | quick documentation using anaconda                                           |
| ~SPC m h H~ | open documentation in =firefox= using [[https://github.com/tsgates/pylookup][pylookup]]                               |
| ~SPC m v s~ | set a pyenv environment with [[https://github.com/pyenv/pyenv][pyenv]]                                           |
| ~SPC m v u~ | unset a pyenv environment with [[https://github.com/pyenv/pyenv][pyenv]]                                         |
| ~SPC m V w~ | work on virtual environment in =WORKON_HOME=                                 |
| ~SPC m V a~ | activate a virtual environment in any directory                              |
| ~SPC m V d~ | deactivate active virtual environment                                        |
